{
    "AWSTemplateFormatVersion": "2010-09-09",
    "Description": "This template creates a full deployment including a VPC and all supporting infrastructure as well as a single server of Microsoft Windows Server 2012 R2 fully configured as an IIS server, and then finally deploys and configures a BIG-IP.",
    "Metadata": {
        "AWS::CloudFormation::Interface": {
            "ParameterGroups": [
                {
                    "Label": {
                        "default": "Basics"
                    },
                    "Parameters": [
                        "WindowsName",
                        "BIGIPName",
                        "KeyName",
                        "adminUsername",
                        "adminPassword"
                    ]
                },
                {
                    "Label": {
                        "default": "Size"
                    },
                    "Parameters": [
                        "WindowsInstanceType",
                        "BIGIPInstanceType",
                        "licenseKey"
                    ]
                },
                {
                    "Label": {
                        "default": "Settings"
                    },
                    "Parameters": [
                        "WindowsAMI",
                        "BIGIPAMI"
                    ]
                }
            ],
            "ParameterLabels": {}
        }
    },
    "Parameters": {
        "KeyName": {
            "Description": "Name of an existing EC2 KeyPair",
            "Type": "AWS::EC2::KeyPair::KeyName",
            "ConstraintDescription": "Must be the name of an existing EC2 KeyPair."
        },
        "adminUsername": {
            "Type": "String",
            "Description": "An admin username for loging into the Windows Server and BIG-IP.",
            "MaxLength": "255",
            "MinLength": "1"
        },
        "adminPassword": {
            "Type": "String",
            "NoEcho": "true",
            "Description": "A password that will be used to login to the Windows Server and BIG-IP.",
            "MaxLength": "255",
            "MinLength": "1"
        },
        "WindowsName": {
            "Description": "The name of the Windows Server.",
            "Type": "String"
        },
        "BIGIPName": {
            "Description": "The name of the BIG-IP.",
            "Type": "String"
        },
        "licenseKey": {
            "Description": "The BYOL License for the BIG-IP.",
            "Type": "String"
        },
        "WindowsInstanceType": {
            "Description": "EC2 instance type",
            "Type": "String",
            "Default": "m4.large",
            "AllowedValues": [               
                "m4.large",
                "m4.xlarge",
                "m4.4xlarge"
            ],
            "ConstraintDescription": "Choose one of these."
        },
        "WindowsAMI": {
            "Description": "Windows Version and Region AMI",
            "Type": "String",
            "Default": "ami-f9d3f49c",
            "AllowedValues": [
                "ami-f9d3f49c"
            ]
        },
        "BIGIPInstanceType": {
            "Description": "EC2 instance type",
            "Type": "String",
            "Default": "m4.xlarge",
            "AllowedValues": [
                "m4.large",
                "m4.xlarge",
                "m4.4xlarge"
            ],
            "ConstraintDescription": "Choose one of these."
        },
        "BIGIPAMI": {
            "Description": "F5 BIG-IP AMI to install from.",
            "Type": "String",
            "Default": "ami-2be6c14e",
            "AllowedValues": [
                "ami-2be6c14e"
            ]
        }
    },
    "Resources": {
        "StackVPC": {
            "Type": "AWS::EC2::VPC",
            "Properties": {
                "EnableDnsSupport": "true",
                "EnableDnsHostnames": "true",
                "CidrBlock": "10.10.0.0/16",
                "Tags": [
                    {
                        "Key": "Name",
                        "Value": {
                            "Fn::Join": [
                                "",
                                [
                                    "VPC-",
                                    {
                                        "Ref": "AWS::StackName"
                                    }
                                ]
                            ]
                        }
                    }
                ]
            }
        },
        "externalSubnet": {
            "Type": "AWS::EC2::Subnet",
            "Properties": {
                "VpcId": {
                    "Ref": "StackVPC"
                },
                "AvailabilityZone": {
                    "Fn::Join": [
                        "",
                        [
                            {
                                "Ref": "AWS::Region"
                            },
                            "a"
                        ]
                    ]
                },
                "CidrBlock": "10.10.20.0/24",
                "MapPublicIpOnLaunch": true,
                "Tags": [
                    {
                        "Key": "Name",
                        "Value": {
                            "Fn::Join": [
                                "",
                                [
                                    "externalSubnet-",
                                    {
                                        "Ref": "AWS::StackName"
                                    }
                                ]
                            ]
                        }
                    }
                ]
            }
        },
        "mgmtSubnet": {
            "Type": "AWS::EC2::Subnet",
            "Properties": {
                "VpcId": {
                    "Ref": "StackVPC"
                },
                "AvailabilityZone": {
                    "Fn::Join": [
                        "",
                        [
                            {
                                "Ref": "AWS::Region"
                            },
                            "b"
                        ]
                    ]
                },
                "CidrBlock": "10.10.30.0/24",
                "MapPublicIpOnLaunch": false,
                "Tags": [
                    {
                        "Key": "Name",
                        "Value": {
                            "Fn::Join": [
                                "",
                                [
                                    "mgmtSubnet-",
                                    {
                                        "Ref": "AWS::StackName"
                                    }
                                ]
                            ]
                        }
                    }
                ]
            }
        },
        "StackInternetGateway": {
            "Type": "AWS::EC2::InternetGateway",
            "Properties": {
                "Tags": [
                    {
                        "Key": "Name",
                        "Value": {
                            "Fn::Join": [
                                "",
                                [
                                    "InternetGateway-",
                                    {
                                        "Ref": "AWS::StackName"
                                    }
                                ]
                            ]
                        }
                    }
                ]
            }
        },
        "AttachGateway": {
            "Type": "AWS::EC2::VPCGatewayAttachment",
            "Properties": {
                "VpcId": {
                    "Ref": "StackVPC"
                },
                "InternetGatewayId": {
                    "Ref": "StackInternetGateway"
                }
            }
        },
        "ServerNATGatewayEIP": {
            "Type": "AWS::EC2::EIP",
            "Properties": {}
        },
        "ServerNATGateway": {
            "DependsOn": "mgmtSubnetRouteTableAssociation",
            "Type": "AWS::EC2::NatGateway",
            "Properties": {
                "AllocationId": {
                    "Fn::GetAtt": [
                        "ServerNATGatewayEIP",
                        "AllocationId"
                    ]
                },
                "SubnetId": {
                    "Ref": "externalSubnet"
                }
            }
        },
        "ExternalRouteTable": {
            "Type": "AWS::EC2::RouteTable",
            "Properties": {
                "VpcId": {
                    "Ref": "StackVPC"
                },
                "Tags": [
                    {
                        "Key": "Name",
                        "Value": {
                            "Fn::Join": [
                                "",
                                [
                                    "ExternalRouteTable-",
                                    {
                                        "Ref": "AWS::StackName"
                                    }
                                ]
                            ]
                        }
                    }
                ]
            }
        },
        "ExternalRoute": {
            "Type": "AWS::EC2::Route",
            "Properties": {
                "RouteTableId": {
                    "Ref": "ExternalRouteTable"
                },
                "DestinationCidrBlock": "0.0.0.0/0",
                "GatewayId": {
                    "Ref": "StackInternetGateway"
                }
            }
        },
        "ExternalSubnetRouteTableAssociation": {
            "Type": "AWS::EC2::SubnetRouteTableAssociation",
            "Properties": {
                "SubnetId": {
                    "Ref": "externalSubnet"
                },
                "RouteTableId": {
                    "Ref": "ExternalRouteTable"
                }
            }
        },
        "mgmtRouteTable": {
            "Type": "AWS::EC2::RouteTable",
            "Properties": {
                "VpcId": {
                    "Ref": "StackVPC"
                },
                "Tags": [
                    {
                        "Key": "Name",
                        "Value": {
                            "Fn::Join": [
                                "",
                                [
                                    "mgmtRouteTable-",
                                    {
                                        "Ref": "AWS::StackName"
                                    }
                                ]
                            ]
                        }
                    }
                ]
            }
        },
        "ServerRoute": {
            "Type": "AWS::EC2::Route",
            "Properties": {
                "RouteTableId": {
                    "Ref": "mgmtRouteTable"
                },
                "DestinationCidrBlock": "0.0.0.0/0",
                "NatGatewayId": {
                    "Ref": "ServerNATGateway"
                }
            }
        },
        "mgmtSubnetRouteTableAssociation": {
            "Type": "AWS::EC2::SubnetRouteTableAssociation",
            "Properties": {
                "SubnetId": {
                    "Ref": "mgmtSubnet"
                },
                "RouteTableId": {
                    "Ref": "mgmtRouteTable"
                }
            }
        },
        "BIGIPSecurityGroup": {
            "Type": "AWS::EC2::SecurityGroup",
            "Properties": {
                "GroupDescription": "Enable HTTP and RDP",
                "VpcId": {
                    "Ref": "StackVPC"
                },
                "SecurityGroupIngress": [
                    {
                        "IpProtocol": "tcp",
                        "FromPort": "80",
                        "ToPort": "80",
                        "CidrIp": "0.0.0.0/0"
                    },
                    {
                        "IpProtocol": "tcp",
                        "FromPort": "8443",
                        "ToPort": "8443",
                        "CidrIp": "0.0.0.0/0"
                    },
                    {
                        "IpProtocol": "tcp",
                        "FromPort": "443",
                        "ToPort": "443",
                        "CidrIp": "0.0.0.0/0"
                    },
                    {
                        "IpProtocol": "tcp",
                        "FromPort": "22",
                        "ToPort": "22",
                        "CidrIp": "0.0.0.0/0"
                    },
                    {
                        "IpProtocol": "tcp",
                        "FromPort": "3389",
                        "ToPort": "3389",
                        "CidrIp": "0.0.0.0/0"
                    }
                ]
            }
        },
        "WindowsSecurityGroup": {
            "Type": "AWS::EC2::SecurityGroup",
            "Properties": {
                "GroupDescription": "Enable HTTP and RDP",
                "VpcId": {
                    "Ref": "StackVPC"
                },
                "SecurityGroupIngress": [
                    {
                        "IpProtocol": "tcp",
                        "FromPort": "80",
                        "ToPort": "80",
                        "CidrIp": "10.10.20.0/24"
                    },
                    {
                        "IpProtocol": "tcp",
                        "FromPort": "3389",
                        "ToPort": "3389",
                        "CidrIp": "10.10.20.0/24"
                    }
                ]
            }
        },
        "BIGIPInstance": {
            "DependsOn": "ExternalSubnetRouteTableAssociation",
            "Type": "AWS::EC2::Instance",
            "Metadata": {
                "AWS::CloudFormation::Init": {
                    "config": {
                        "files": {
                            "/config/cloud/aws/createUser.sh": {
                                "content": {
                                    "Fn::Join": [
                                        "",
                                        [
                                            "#!/bin/bash\n",
                                            "#f5-rest-node /config/cloud/aws/node_modules/f5-cloud-libs/scripts/generatePassword --file /config/cloud/aws/.adminPassword\n",
                                            "#PASSWORD=$(/bin/sed -e $'s:[\\'\"%{};/|#\\x20\\\\\\\\]:\\\\\\\\&:g' < /config/cloud/aws/.adminPassword)\n",
                                            "PASSWORD=",
                                            {
                                                "Ref": "adminPassword"
                                            },
                                            "\n",
                                            "if [ \"$1\" = admin ]; then\n",
                                            "    tmsh modify auth user \"$1\" password ${PASSWORD}\n",
                                            "else\n",
                                            "    tmsh create auth user \"$1\" password ${PASSWORD} shell bash partition-access replace-all-with { all-partitions { role admin } }\n",
                                            "fi\n"
                                        ]
                                    ]
                                },
                                "group": "root",
                                "mode": "000755",
                                "owner": "root"
                            },
                            "/config/cloud/aws/rm-password.sh": {
                                "content": {
                                    "Fn::Join": [
                                        "",
                                        [
                                            "#!/bin/bash\n",
                                            "date\n",
                                            "echo 'starting rm-password.sh'\n",
                                            "rm /config/cloud/aws/.adminPassword\n",
                                            "date\n"
                                        ]
                                    ]
                                },
                                "group": "root",
                                "mode": "000755",
                                "owner": "root"
                            },
                            "/config/cloud/f5-cloud-libs.tar.gz": {
                                "group": "root",
                                "mode": "000755",
                                "owner": "root",
                                "source": "https://raw.githubusercontent.com/F5Networks/f5-cloud-libs/v3.0.2/dist/f5-cloud-libs.tar.gz"
                            },
                            "/config/getNameServer.sh": {
                                "content": {
                                    "Fn::Join": [
                                        "\n",
                                        [
                                            "INTERFACE=$1",
                                            "INTERFACE_MAC=`ifconfig ${INTERFACE} | egrep HWaddr | awk '{print tolower($5)}'`",
                                            "INTERFACE_MAC=`ifconfig ${INTERFACE} | egrep HWaddr | awk '{print tolower($5)}'`",
                                            "VPC_CIDR_BLOCK=`curl -s http://169.254.169.254/latest/meta-data/network/interfaces/macs/${INTERFACE_MAC}/vpc-ipv4-cidr-block`",
                                            "VPC_NET=${VPC_CIDR_BLOCK%/*}",
                                            "NAME_SERVER=`echo ${VPC_NET} | awk -F. '{ printf \"%d.%d.%d.%d\", $1, $2, $3, $4+2 }'`",
                                            "echo $NAME_SERVER"
                                        ]
                                    ]
                                },
                                "group": "root",
                                "mode": "000755",
                                "owner": "root"
                            },
                            "/config/installCloudLibs.sh": {
                                "content": {
                                    "Fn::Join": [
                                        "\n",
                                        [
                                            "#!/bin/bash",
                                            "echo about to execute",
                                            "checks=0",
                                            "while [ $checks -lt 120 ]; do echo checking mcpd",
                                            "    tmsh -a show sys mcp-state field-fmt | grep -q running",
                                            "    if [ $? == 0 ]; then",
                                            "        echo mcpd ready",
                                            "        break",
                                            "    fi",
                                            "    echo mcpd not ready yet",
                                            "    let checks=checks+1",
                                            "    sleep 10",
                                            "done",
                                            "echo loading verifyHash script",
                                            "if ! tmsh load sys config merge file /config/verifyHash; then",
                                            "    echo cannot validate signature of /config/verifyHash",
                                            "    exit",
                                            "fi",
                                            "echo loaded verifyHash",
                                            "declare -a filesToVerify=(\"/config/cloud/f5-cloud-libs.tar.gz\" \"/config/cloud/f5-cloud-libs-aws.tar.gz\")",
                                            "for fileToVerify in \"${filesToVerify[@]}\"",
                                            "do",
                                            "    echo verifying \"$fileToVerify\"",
                                            "    if ! tmsh run cli script verifyHash \"$fileToVerify\"; then",
                                            "        echo \"$fileToVerify\" is not valid",
                                            "        exit 1",
                                            "    fi",
                                            "    echo verified \"$fileToVerify\"",
                                            "done",
                                            "mkdir -p /config/cloud/aws/node_modules",
                                            "echo expanding f5-cloud-libs.tar.gz",
                                            "tar xvfz /config/cloud/f5-cloud-libs.tar.gz -C /config/cloud/aws/node_modules",
                                            "touch /config/cloud/cloudLibsReady"
                                        ]
                                    ]
                                },
                                "group": "root",
                                "mode": "000755",
                                "owner": "root"
                            },
                            "/config/verifyHash": {
                                "content": {
                                    "Fn::Join": [
                                        "\n",
                                        [
                                            "cli script /Common/verifyHash {\n",
                                            "proc script::run {} {\n",
                                            "       if {[catch {\n",
                                            "           set hashes(f5-cloud-libs.tar.gz) 862f7c19396088ab012fda7c2b262621c17f134b1d39d7a4d0b765eaf92f3ddc7354716a4f546fabb866df9876e1baed5799ae4a2c9d0ea6f01f79a38b9d3b3e\n",
                                            "           set hashes(f5-cloud-libs-aws.tar.gz) 2566f515fb46d89f5a245079b0efdad60fd78327c352e567bd5d573eb2ee0093d167a2f054b2408bd7df49c5debc4218074fdb50cfe135bb80ccc6c303a03f72\n",
                                            "           set hashes(f5-cloud-libs-azure.tar.gz) 9d4dc6779a5d25253832598d42681defa54c5f4521a70ba8e053179c262cdf0d5c8d6a3d458ea21da1d95212792b099bf2721ddbe175eed035cd1e00647124cf\n",
                                            "            set hashes(asm-policy-linux.tar.gz) 63b5c2a51ca09c43bd89af3773bbab87c71a6e7f6ad9410b229b4e0a1c483d46f1a9fff39d9944041b02ee9260724027414de592e99f4c2475415323e18a72e0\n",
                                            "            set hashes(f5.http.v1.2.0rc4.tmpl) 47c19a83ebfc7bd1e9e9c35f3424945ef8694aa437eedd17b6a387788d4db1396fefe445199b497064d76967b0d50238154190ca0bd73941298fc257df4dc034\n",
                                            "            set hashes(f5.http.v1.2.0rc6.tmpl) 811b14bffaab5ed0365f0106bb5ce5e4ec22385655ea3ac04de2a39bd9944f51e3714619dae7ca43662c956b5212228858f0592672a2579d4a87769186e2cbfe\n",
                                            "            set hashes(f5.http.v1.2.0rc7.tmpl) 21f413342e9a7a281a0f0e1301e745aa86af21a697d2e6fdc21dd279734936631e92f34bf1c2d2504c201f56ccd75c5c13baa2fe7653213689ec3c9e27dff77d\n",
                                            "            set hashes(f5.aws_advanced_ha.v1.3.0rc1.tmpl) 9e55149c010c1d395abdae3c3d2cb83ec13d31ed39424695e88680cf3ed5a013d626b326711d3d40ef2df46b72d414b4cb8e4f445ea0738dcbd25c4c843ac39d\n",
                                            "            set hashes(f5.aws_advanced_ha.v1.4.0rc1.tmpl) de068455257412a949f1eadccaee8506347e04fd69bfb645001b76f200127668e4a06be2bbb94e10fefc215cfc3665b07945e6d733cbe1a4fa1b88e881590396\n",
                                            "            set hashes(asm-policy.tar.gz) 2d39ec60d006d05d8a1567a1d8aae722419e8b062ad77d6d9a31652971e5e67bc4043d81671ba2a8b12dd229ea46d205144f75374ed4cae58cefa8f9ab6533e6\n",
                                            "            set hashes(deploy_waf.sh) 4db3176b45913a5e7ccf42ab9c7ac9d7de115cdbd030b9e735946f92456b6eb433087ed0e98ac4981c76d475cd38f4de49cd98c063e13d50328a270e5b3daa4a\n",
                                            "            set hashes(f5.policy_creator.tmpl) 54d265e0a573d3ae99864adf4e054b293644e48a54de1e19e8a6826aa32ab03bd04c7255fd9c980c3673e9cd326b0ced513665a91367add1866875e5ef3c4e3a\n",
                                            "\n",
                                            "            set file_path [lindex $tmsh::argv 1]\n",
                                            "            set file_name [file tail $file_path]\n",
                                            "\n",
                                            "            if {![info exists hashes($file_name)]} {\n",
                                            "                tmsh::log err \"No hash found for $file_name\"\n",
                                            "                exit 1\n",
                                            "            }\n",
                                            "\n",
                                            "            set expected_hash $hashes($file_name)\n",
                                            "            set computed_hash [lindex [exec /usr/bin/openssl dgst -r -sha512 $file_path] 0]\n",
                                            "            if { $expected_hash eq $computed_hash } {\n",
                                            "                exit 0\n",
                                            "            }\n",
                                            "            tmsh::log err \"Hash does not match for $file_path\"\n",
                                            "            exit 1\n",
                                            "        }]} {\n",
                                            "            tmsh::log err {Unexpected error in verifyHash}\n",
                                            "            exit 1\n",
                                            "        }\n",
                                            "    }\n",
                                            "    script-signature VwqAYsu1/TM/B7OPgCB2SXyiQ5s0MJH6qqzrypWaoZcRtXc9w9jNz8YwmqQyFn7TWTqCCLxmnMT4bmLzqNIYWesegv7w5KcBMwA8C0NTOebjHLkqKPzr2P68NiVzPN1/gxp3Y2i2e9zpnvy8PXcWRK3PkauO8lVSE7TJ07/uydvjg9t3GEjN449TUIZ+fx0NhqxS9VD6HDqv66FKgVcAeiomqrB2YQeawE4oShnbV2ULBP9IN8X/Rp9cb2gw1IPYZcLneP/rtgkMHOPmnzPV4u+tEowPzIjAo9mTV2J7e4z50peN3vdD7ThO1aPdcd5dfxbRqWZtlyV/pDPPHVVEdg==\n",
                                            "    signing-key /Common/f5-irule\n",
                                            "}\n"
                                        ]
                                    ]
                                },
                                "group": "root",
                                "mode": "000755",
                                "owner": "root"
                            },
                            "/config/waitThenRun.sh": {
                                "content": {
                                    "Fn::Join": [
                                        "\n",
                                        [
                                            "#!/bin/bash",
                                            "while true; do echo \"waiting for cloud libs install to complete\"",
                                            "    if [ -f /config/cloud/cloudLibsReady ]; then",
                                            "        break",
                                            "    else",
                                            "        sleep 10",
                                            "    fi",
                                            "done",
                                            "\"$@\""
                                        ]
                                    ]
                                },
                                "group": "root",
                                "mode": "000755",
                                "owner": "root"
                            },
                            "/config/cloud/aws/signalDone.sh": {
                                "content": {
                                    "Fn::Join": [
                                        "",
                                        [
                                            "#!/bin/bash\n",
                                            "/opt/aws/apitools/cfn-init-1.4-0.amzn1/bin/cfn-signal -e $? '",
                                            {
                                                "Ref": "BIGIPWaitHandle"
                                            },
                                            "'\n"
                                        ]
                                    ]
                                },
                                "mode": "000755",
                                "owner": "root",
                                "group": "root"
                            },
                            "/config/cloud/aws/appConfiguartion.sh": {
                                "content": {
                                    "Fn::Join": [
                                        "",
                                        [
                                            "#!/bin/bash\n",
                                            "exit\n"
                                        ]
                                    ]
                                },
                                "mode": "000755",
                                "owner": "root",
                                "group": "root"
                            }
                        },
                        "commands": {
                            "001-disable-1nicautoconfig": {
                                "command": "/usr/bin/setdb provision.1nicautoconfig disable &>> /var/log/cloudlibs-install.log"
                            },
                            "002-install-libs": {
                                "command": "/config/installCloudLibs.sh &>> /var/log/cloudlibs-install.log"
                            },
                            "003-1nic-setup": {
                                "command": {
                                    "Fn::Join": [
                                        " ",
                                        [
                                            "nohup /config/waitThenRun.sh",
                                            "f5-rest-node /config/cloud/aws/f5-cloud-libs/scripts/runScript.js",
                                            "--file /config/cloud/aws/f5-cloud-libs/scripts/aws/1nicSetup.sh",
                                            "--cwd /config/cloud/aws/f5-cloud-libs/scripts/aws",
                                            "-o /var/log/1nicSetup.log",
                                            "--signal 1_NIC_SETUP_DONE",
                                            "--background",
                                            "&>> /var/log/cloudlibs-install.log &"
                                        ]
                                    ]
                                }
                            },
                            "004-create-admin-user": {
                                "command": {
                                    "Fn::Join": [
                                        "",
                                        [
                                            "nohup /config/waitThenRun.sh",
                                            " f5-rest-node /config/cloud/aws/f5-cloud-libs/scripts/runScript.js",
                                            " --file /config/cloud/aws/createUser.sh",
                                            " --cl-args '",
                                            {
                                                "Ref": "adminUsername"
                                            },
                                            "'",
                                            " --signal CREATEUSER_DONE",
                                            " --wait-for 1_NIC_SETUP_DONE",
                                            " --log-level verbose",
                                            " -o /var/log/createUser.log",
                                            " --background",
                                            " &>> /var/log/cloudlibs-install.log &"
                                        ]
                                    ]
                                }
                            },
                            "005-onboard-BIG-IP": {
                                "command": {
                                    "Fn::Join": [
                                        " ",
                                        [
                                            "NAME_SERVER=`/config/cloud/aws/getNameServer.sh eth0`;",
                                            "nohup /config/waitThenRun.sh",
                                            "f5-rest-node /config/cloud/aws/f5-cloud-libs/scripts/onboard.js",
                                            "--ssl-port '8443'",
                                            "--log-level verbose",
                                            "-o  /var/log/onboard.log",
                                            "--background",
                                            "--no-reboot",
                                            "--wait-for CREATEUSER_DONE",
                                            "--signal ONBOARD_DONE",
                                            "--host localhost",
                                            "-l ",
                                            {
                                                "Ref": "licenseKey"
                                            },
                                            " --user",
                                            {
                                                "Ref": "adminUsername"
                                            },
                                            "--password",
                                            {
                                                "Ref": "adminPassword"
                                            },
                                            "--hostname `curl http://169.254.169.254/latest/meta-data/hostname`",
                                            "--ntp 0.us.pool.ntp.org",
                                            "--ntp 1.us.pool.ntp.org",
                                            "--tz UTC",
                                            "--dns ${NAME_SERVER}",
                                            "--module ltm:nominal",
                                            "&>> /var/log/cloudlibs-install.log &"
                                        ]
                                    ]
                                }
                            },
                            "006-app-config": {
                                "command": {
                                    "Fn::Join": [
                                        "",
                                        [
                                            "nohup /config/waitThenRun.sh ",
                                            "f5-rest-node /config/cloud/aws/f5-cloud-libs/scripts/runScript.js",
                                            " --file /config/cloud/aws/appConfiguartion.sh",
                                            " --cwd /config/cloud/aws",
                                            " --log-level debug",
                                            " --cl-args '",
                                            "-i ",
                                            {
                                                "Fn::GetAtt": [
                                                    "WindowsInstance",
                                                    "PrivateIp"
                                                ]
                                            },
                                            " -d myWebapp.example.com",
                                            " -x ",
                                            {
                                                "Ref": "adminPassword"
                                            },
                                            "'",
                                            " -o /var/log/appConfiguartion.log",
                                            " --wait-for ONBOARD_DONE",
                                            " --signal APP_CONFIG_DONE",
                                            " --background",
                                            " &>> /var/log/cloudlibs-install.log &"
                                        ]
                                    ]
                                }
                            },
                            "007-signal-done": {
                                "command": {
                                    "Fn::Join": [
                                        " ",
                                        [
                                            "nohup /config/waitThenRun.sh",
                                            "f5-rest-node /config/cloud/aws/f5-cloud-libs/scripts/runScript.js",
                                            "--file /config/cloud/aws/signalDone.sh",
                                            "--cwd /config/cloud/aws",
                                            "-o /var/log/signlDone.log",
                                            "--wait-for APP_CONFIG_DONE",
                                            "--background",
                                            "&>> /var/log/cloudlibs-install.log &"
                                        ]
                                    ]
                                }
                            }
                        }
                    }
                }
            },
            "Properties": {
                "InstanceType": {
                    "Ref": "BIGIPInstanceType"
                },
                "ImageId": {
                    "Ref": "BIGIPAMI"
                },
                "KeyName": {
                    "Ref": "KeyName"
                },
                "SubnetId": {
                    "Ref": "externalSubnet"
                },
                "SecurityGroupIds": [
                    {
                        "Fn::GetAtt": [
                            "BIGIPSecurityGroup",
                            "GroupId"
                        ]
                    }
                ],
                "UserData": {
                    "Fn::Base64": {
                        "Fn::Join": [
                            "",
                            [
                                "#!/bin/bash\n",
                                "/opt/aws/apitools/cfn-init-1.4-0.amzn1/bin/cfn-init -v ",
                                " --stack ",
                                {
                                    "Ref": "AWS::StackName"
                                },
                                " --resource BIGIPInstance",
                                " --region ",
                                {
                                    "Ref": "AWS::Region"
                                },
                                "\n"
                            ]
                        ]
                    }
                }
            }
        },
        "BIGIPWaitCondition": {
            "Type": "AWS::CloudFormation::WaitCondition",
            "DependsOn": "BIGIPInstance",
            "Properties": {
                "Handle": {
                    "Ref": "BIGIPWaitHandle"
                },
                "Count": "1",
                "Timeout": "1200"
            }
        },
        "BIGIPWaitHandle": {
            "Type": "AWS::CloudFormation::WaitConditionHandle",
            "Properties": {}
        },
        "WindowsInstance": {
            "DependsOn": "ServerNATGateway",
            "Type": "AWS::EC2::Instance",
            "Metadata": {
                "AWS::CloudFormation::Init": {
                    "config": {
                        "files": {
                            "C:\\Users\\Administrator\\Downloads\\firstrun.ps1": {
                                "content": {
                                    "Fn::Join": [
                                        "",
                                        [
                                            "echo \"Installing web-webserver\"\n",
                                            "add-windowsfeature web-webserver -includeallsubfeature -logpath $env:temp\\webserver_addrole.log\n",
                                            "echo \"Installing web-mgmt-tools\"\n",
                                            "add-windowsfeature web-mgmt-tools -includeallsubfeature -logpath $env:temp\\mgmttools_addrole.log\n",
                                            "echo \"This is the first Windows IIS Server ",
                                            {
                                                "Ref": "WindowsName"
                                            },
                                            "\" >> C:\\inetpub\\wwwroot\\index.html\n",
                                            "$pass = ConvertTo-SecureString \"",
                                            {
                                                "Ref": "adminPassword"
                                            },
                                            "\" -AsPlainText -Force\n",
                                            "New-LocalUser -Name \"tstanley\" -Password $pass -PasswordNeverExpires\n",
                                            "Add-LocalGroupMember -Group \"Administrators\" -Member \"",
                                            {
                                                "Ref": "adminUsername"
                                            },
                                            "\"\n",
                                            "if ($?) {\n",
                                            "$LASTEXITCODE = 0\n",
                                            "} else {\n",
                                            "$LASTEXITCODE = 1\n",
                                            "}\n",
                                            "$waitHandle = [System.Text.Encoding]::UTF8.GetString([System.Convert]::FromBase64String(\"",
                                            {
                                                "Fn::Base64": {
                                                    "Ref": "WindowsInstanceWaitHandle"
                                                }
                                            },
                                            "\"))",
                                            "\n",
                                            "cfn-signal.exe -e $LASTEXITCODE $waitHandle\n"
                                        ]
                                    ]
                                }
                            }
                        },
                        "commands": {
                            "b-configure": {
                                "command": "powershell.exe -ExecutionPolicy unrestricted C:\\Users\\Administrator\\Downloads\\firstrun.ps1"
                            }
                        }
                    }
                }
            },
            "Properties": {
                "InstanceType": {
                    "Ref": "WindowsInstanceType"
                },
                "ImageId": {
                    "Ref": "WindowsAMI"
                },
                "KeyName": {
                    "Ref": "KeyName"
                },
                "SubnetId": {
                    "Ref": "mgmtSubnet"
                },
                "SecurityGroupIds": [
                    {
                        "Fn::GetAtt": [
                            "WindowsSecurityGroup",
                            "GroupId"
                        ]
                    }
                ],
                "UserData": {
                    "Fn::Base64": {
                        "Fn::Join": [
                            "",
                            [
                                "<script>\n",
                                "cfn-init.exe -v ",
                                " --stack ",
                                {
                                    "Ref": "AWS::StackId"
                                },
                                " --resource WindowsInstance",
                                " --region ",
                                {
                                    "Ref": "AWS::Region"
                                },
                                "\n",
                                "</script>"
                            ]
                        ]
                    }
                }
            }
        },
        "WindowsInstanceWaitHandle": {
            "Type": "AWS::CloudFormation::WaitConditionHandle"
        },
        "WindowsInstanceWaitCondition": {
            "Type": "AWS::CloudFormation::WaitCondition",
            "DependsOn": "WindowsInstance",
            "Properties": {
                "Handle": {
                    "Ref": "WindowsInstanceWaitHandle"
                },
                "Timeout": "1800"
            }
        }
    },
    "Outputs": {
        "ServerRDP": {
            "Description": "Use this to connect to the Windows Server RDP.",
            "Value": {
                "Fn::Join": [
                    "",
                    [
                        {
                            "Fn::GetAtt": [
                                "BIGIPInstance",
                                "PublicDnsName"
                            ]
                        },
                        ":3389"
                    ]
                ]
            }
        },
        "BIGIPURL": {
            "Description": "The BIG-IP MGMT URL.",
            "Value": {
                "Fn::Join": [
                    "",
                    [
                        "https://",
                        {
                            "Fn::GetAtt": [
                                "BIGIPInstance",
                                "PublicDnsName"
                            ]
                        },
                        ":8443/"
                    ]
                ]
            }
        },
        "ApplicationURL": {
            "Description": "Use this URL to connect to the application.",
            "Value": {
                "Fn::Join": [
                    "",
                    [
                        "http://",
                        {
                            "Fn::GetAtt": [
                                "BIGIPInstance",
                                "PublicDnsName"
                            ]
                        },
                        "/"
                    ]
                ]
            }
        }
    }
}